<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">
    <context:component-scan base-package="aspectj"></context:component-scan>

    <context:component-scan base-package="service"></context:component-scan>
    <context:component-scan base-package="dao" ></context:component-scan>
    <aop:config proxy-target-class="true"/>
    <aop:aspectj-autoproxy/>
    <!-- 在classpath 读取属性配置文件-->
    <context:property-placeholder ignore-unresolvable="true" location="classpath:db.properties"/>
    <!-- 数据源  连接池-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!--配置连接池属性-->
        <!--配置驱动类名字-->
        <property name="driverClassName" value="${jdbc.driver}" />
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />
        <property name="maxActive" value="20" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <!-- 验证连接有效与否的SQL，不同的数据配置不同 -->
        <property name="validationQuery" value="select 1 " />

    </bean>

    <!--3.配置SqlSessionFactory对象 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--注入数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>
        <!--配置mybatis全局配置文件:mybatis-config.xml -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>

    </bean>
    <!--4 自动扫描对象关系映射 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定会话工厂，如果当前上下文中只定义了一个则该属性可省去 -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
        <!-- 指定要自动扫描接口的基础包，实现接口 -->
        <property name="basePackage" value="dao"></property>
    </bean>
    <!-- 事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--  数据源 源自于mybatis，也就是看dao.xml-->
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!-- 开启注解事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <!-- 通知事务系列方法 -->
    <!--<tx:advice id="txAdvice" transaction-manager="transactionManager">-->
        <!--&lt;!&ndash;定义属性，声明事务规则 &ndash;&gt;-->
        <!--<tx:attributes>-->
            <!--&lt;!&ndash; REQUIRED意思是如果当前事务不存在，就创建一个事务 &ndash;&gt;-->
            <!--<tx:method name="transfer*" propagation="REQUIRED"/>-->
            <!--<tx:method name="save*" propagation="REQUIRED"/>-->
            <!--<tx:method name="add*" propagation="REQUIRED"/>-->
            <!--<tx:method name="insert*" propagation="REQUIRED"/>-->
            <!--<tx:method name="create*" propagation="REQUIRED"/>-->
            <!--<tx:method name="update*" propagation="REQUIRED"/>-->
            <!--<tx:method name="modify*" propagation="REQUIRED"/>-->
            <!--<tx:method name="edit*" propagation="REQUIRED"/>-->
            <!--<tx:method name="delete*" propagation="REQUIRED"/>-->
            <!--<tx:method name="remove*" propagation="REQUIRED"/>-->
            <!--<tx:method name="drop*" propagation="REQUIRED"/>-->
            <!--<tx:method name="pay*" propagation="REQUIRED"/>-->
            <!--&lt;!&ndash; SUPPORTS意思是 如果当前没有事务存在，就以非事务的方式执行 &ndash;&gt;-->
            <!--<tx:method name="select*" propagation="SUPPORTS" read-only="true"/>-->
            <!--<tx:method name="get*" propagation="SUPPORTS" read-only="true"/>-->
            <!--<tx:method name="find*" propagation="SUPPORTS" read-only="true"/>-->
            <!--<tx:method name="query*" propagation="SUPPORTS" read-only="true"/>-->
            <!--<tx:method name="search*" propagation="SUPPORTS" read-only="true"/>-->

        <!--</tx:attributes>-->
    <!--</tx:advice>-->
    <!--<aop:config>-->
        <!--<aop:pointcut id="txPointCut" expression="execution(* com..service..*.*(..))"/>-->
        <!--&lt;!&ndash; 将事务增强与切入点组合（织入事务切面） &ndash;&gt;-->
        <!--<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/>-->
    <!--</aop:config>-->

</beans>
